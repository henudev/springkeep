package com.h3c.bigdata.zhgx.function.report.dao;

import com.baomidou.mybatisplus.mapper.BaseMapper;
import com.h3c.bigdata.zhgx.function.report.entity.TemplateEntity;
import com.h3c.bigdata.zhgx.function.report.entity.TemplateEntityExample;
import com.h3c.bigdata.zhgx.function.report.model.TemplateAddBean;
import com.h3c.bigdata.zhgx.function.report.model.TemplateItemBean;
import com.h3c.bigdata.zhgx.function.report.model.TemplateModel;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public interface TemplateEntityMapper extends BaseMapper<TemplateEntity> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    long countByExample(TemplateEntityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    int deleteByExample(TemplateEntityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    Integer insert(TemplateEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    int insertSelective(TemplateEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    List<TemplateEntity> selectByExample(TemplateEntityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    TemplateEntity selectByPrimaryKey(Integer id);


    /**
    * @Description: 根据数据库表名查询模板信息
    * @param number
    * @return
    * @Author: w15112
    * @Date: 2019/6/12 9:21
    */
    TemplateEntity selectByNumber(String  number);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") TemplateEntity record, @Param("example") TemplateEntityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    Integer updateByExample(@Param("record") TemplateEntity record, @Param("example") TemplateEntityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(TemplateEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table template
     *
     * @mbg.generated
     */
    Integer updateByPrimaryKey(TemplateEntity record);

    List<TemplateModel> selectAllByKeyword(@Param("name") String name,
                                           @Param("list") List list);

	TemplateAddBean queryTempByNumber(@Param("tempNumber") String tempNumber,
                                      @Param("templateSourceName")String templateSourceName);
    List<TemplateItemBean> queryTemplateItemBeanByNumber(@Param("id") Integer id);
	void updateTempByTempNu(TemplateAddBean template);

	void updateTempCommentByNu(TemplateAddBean template);

    List<TemplateEntity> getTemplateList(@Param("list") List list,
                                         @Param("name") String name,
                                         @Param("departmentCode") String departmentCode);


    int deleteTemplateById(@Param("id") String id);

    /**
     * 根据字段名和数值获取已存在的值
     */
    String getTemOrTabNameItem(@Param("temOrTabName") String temOrTabName, @Param("item") String item);

    /**
     * 获取所有的模板信息列表
     */
    List<TemplateEntity> getAllTemplates();
    /**
     * 获取所有包含整数、小数字段的模板信息列表
     */
    List<TemplateEntity> getAllNumcriTemplates();

    /**
     * 更新模板是否使用的状态
     */
    void updateTempById(@Param("templateId")Integer templateId, @Param("isUsed")String isUsed);

    List<Map<String, String>> annexWordList(String tempalteName);

    /**
     * 获取研发版模板重要字段
     */
    List<Map<String, String>> getYfTempalteWords();
    /**
     * 获取研发版模板具体字段
     */
    List<Map<String, String>> getYfTempalteDes();

    List<String> getItermwords(@Param("templateId")String templateId);

    int mvInsert(@Param("item")String item, @Param("tempalteName")String tempalteName);

    List<String> selectTemplateList();
    int updateCollectCount(@Param("tempalteName")String tempalteName);


}
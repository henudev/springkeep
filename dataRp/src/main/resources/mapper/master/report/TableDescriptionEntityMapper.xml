<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.h3c.bigdata.zhgx.function.report.dao.TableDescriptionEntityMapper">
  <resultMap id="BaseResultMap" type="com.h3c.bigdata.zhgx.function.report.entity.TableDescriptionEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="item" jdbcType="VARCHAR" property="item" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="is_null" jdbcType="TINYINT" property="isNull" />
    <result column="enums" jdbcType="VARCHAR" property="enums" />
    <result column="is_union_only" jdbcType="TINYINT" property="isUnionOnly" />
    <result column="is_search" jdbcType="TINYINT" property="isSearch" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, number, item, name, type, is_null, enums
  </sql>
  <select id="selectByTemplateId" parameterType="com.h3c.bigdata.zhgx.function.report.entity.TableDescriptionEntity" resultMap="BaseResultMap">
    select * from table_description
      where template_id = #{templateId}
  </select>
  
  
  <update id="updateDescByTmpNu">
  	<foreach collection="itemBeans" item="item" index="index" separator=";">
  	update table_description 
  		<set>
  			<if test="item.itemDesc!= null and item.itemDesc!= ''">
  				name=#{item.itemDesc},
  			</if>
            <if test="item.enums!= null and item.enums!= ''">
                enums=#{item.enums},
            </if>
  			<if test="item.isSearch!=null">
  				is_search=#{item.isSearch}
  			</if>
  		</set>
  		<where>
            template_id = #{id} and item=#{item.itemName}
  		</where>
  	</foreach>
  </update>
  
  <update id="updateDescCommentByTmpNu">
  	<foreach collection="list" item="item" index="index" separator=";">
  		${item}
  	</foreach>
  </update>
  
  <select id="selectUnionOnly" resultType="string">
  	SELECT item FROM `table_description` where template_id=#{templateId} and is_union_only='1'
  </select>

    <select id="selectAnnex" resultType="string">
        SELECT item FROM `table_description` where template_id=#{templateId} and type='6'
    </select>
  
  <select id="selectUnionOnlyData" resultType="string"> 
  	select 
  	<foreach collection="unionOnlyKey" item="key" separator=",'-'," open=" concat(" close=")">
  		${key}
  	</foreach>
  	from ${number} for update
  </select>
  
  <!-- 根据联合唯一键删除数据 -->
  <delete id="deleteByUnionOnlyKeys">
  	<foreach collection="unionOnlyKeys" item="unionOnlyKey" separator=";">
  		delete from ${number} 
  		<where>
	  		<foreach collection="unionOnlyKey" index="key" item="value" separator=" and ">
	  			${key}=#{value} 
	  		</foreach>
  		</where> 
  	</foreach>
  </delete>
  <!-- 批量根据联合唯一键删除数据-->
  <delete id="deleteBatchByUnionOnlyKeys">
  	delete from ${number} 
  	<where>
  		<foreach collection="keys" item="unionKey" open="(" close=")" separator=",">
  			${unionKey}
  		</foreach>
  		<foreach collection="unionOnlyKeys" item="unionOnlyKey" separator="," open="in (" close=")">
	  		<foreach collection="unionOnlyKey" index="key" item="value" separator="," open="(" close=")">
	  			#{value} 
	  		</foreach>
  		</foreach>
  	</where>
  </delete>
  
  <insert id="execSql">
  	${sql}
  </insert>
    <!--插入字段记录-->
    <insert id="insertTableDescriptionEntity">
        insert into table_description (number, item, name,type,is_null,enums,is_union_only, is_search, template_id,is_sort)
        VALUES
        <foreach collection="itemBeans" item="bean"  separator="," >
            (#{bean.number},#{bean.itemName},#{bean.itemDesc},#{bean.type},#{bean.isNull},
            #{bean.enums},#{bean.isUnionOnly}, #{bean.isSearch},#{bean.templateId},#{bean.isSort})
        </foreach>
    </insert>

    <select id="selectByUnionOnlyKeys" resultType="integer">
  	select count(*) from ${number} 
   		<where>
	  		<foreach collection="unionOnlyKeys" index="key" item="value" separator=" and ">
	  			${key}=#{value} 
	  		</foreach>
	  		and id != #{id}
  		</where>  	
  </select>
  
  <update id="updateData">
    update ${number}
    <set>
        <foreach collection="data" index="key" item="value" separator=",">
            ${key}=#{value}
        </foreach>
    </set>
    <where>
        id = #{id}
    </where>
</update>

    <!--更新数据填报记录表的模板id-->
    <update id="updateDescriptionTemplateId">
       UPDATE table_description a
       SET a.template_id = #{templateId}
        WHERE number = #{tableName}
    </update>
    <delete id="delData" >
        delete from ${number} where id = ${id}
    </delete>
    <delete id="delDataByTime" >
        delete from ${number} where update_time = ${updateTime}
    </delete>
    <select id="queryData" resultType="map">
        select * from ${number}
        <if test="conditions != null">
            <where>
                <foreach collection="conditions" index="key" item="value" separator=" and ">
                    ${key}=#{value}
                </foreach>
            </where>
        </if>
        order by id desc limit ${page},${size}
    </select>
    <select id="queryDataCount" resultType="int">
        select count(*) from ${number}
        <if test="conditions != null">
            <where>
                <foreach collection="conditions" index="key" item="value" separator=" and ">
                    ${key}=#{value}
                </foreach>
            </where>
        </if>
    </select>
    <!--根据表名和字段名查询已存在的字段名-->
    <select id="getTableItem" resultType="java.lang.String">
        select item from table_description
        where number =#{tableName} and item = #{item} and templaet_source_name = #{templateSourceName}
    </select>
    <select id="selectAnnexIds" resultType="java.lang.String">
        select ${annex} from ${number} where id = #{dataId}
    </select>

    <select id="selectIdsByUnionOnlyKeys" resultType="java.lang.String">
        select id from ${number}
        <where>
            <foreach collection="keys" item="unionKey" open="(" close=")" separator=",">
                ${unionKey}
            </foreach>
            <foreach collection="unionOnlyKeys" item="unionOnlyKey" separator="," open="in (" close=")">
                <foreach collection="unionOnlyKey" index="key" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </foreach>
        </where>
    </select>

</mapper>
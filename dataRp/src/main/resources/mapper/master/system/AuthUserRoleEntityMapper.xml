<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.h3c.bigdata.zhgx.function.system.dao.AuthUserRoleEntityMapper">
  <resultMap id="BaseResultMap" type="com.h3c.bigdata.zhgx.function.system.entity.AuthUserRoleEntity">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
  </resultMap>

    <insert id="batchInsertUserRole" parameterType="java.util.List" >
        INSERT INTO auth_user_role (id,role_id,user_id)
        VALUES
        <foreach collection ="list" item="userRole" separator =",">
            (#{userRole.id},#{userRole.roleId},#{userRole.userId})
        </foreach >
    </insert>

    <select id="queryUserRoleByRoleId" resultMap="BaseResultMap">
        select * from auth_user_role a
        left join
        auth_user_info b
        on
        a.user_id = b.user_id
        where
        role_id = #{roleId}
        and
        b.`status`='0'
    </select>

    <select id="queryUserRoleByRoleName" resultMap="BaseResultMap">
        SELECT
	    b.*
        FROM
	    auth_user_role b
	    LEFT JOIN auth_role_info a ON a.id = b.role_id
	    LEFT JOIN auth_user_info c ON c.user_id = b.user_id
        WHERE
	    a.role_name = #{roleName}
	    AND c.`status` = '0'
        <if test="departmentId != null and departmentId != ''">
        AND c.department_id =#{departmentId}
        </if>
    </select>



    <delete id="deleteUserRoleByRoleId" parameterType="java.util.List">
        delete from auth_user_role where role_id in
        <foreach item="role" collection="list" open="(" separator="," close=")">
            #{role.id}
        </foreach>
    </delete>

    <delete id="deleteUserRoleByUserId" parameterType="java.util.Map">
        delete from auth_user_role where user_id in
        <foreach item="user" collection="users" open="(" separator="," close=")">
            #{user.userId}
        </foreach>
    </delete>

    <resultMap id="UserWithRoleResultMap" type="com.h3c.bigdata.zhgx.function.system.model.UserWithRoleModel">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="user_id" jdbcType="VARCHAR" property="userId" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="user_name_pinyin" jdbcType="VARCHAR" property="userNamePinyin" />
        <result column="department_id" jdbcType="VARCHAR" property="departmentId" />
        <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
        <result column="email_address" jdbcType="VARCHAR" property="emailAddress" />
        <result column="age" jdbcType="VARCHAR" property="age" />
        <result column="identity_number" jdbcType="VARCHAR" property="identityNumber" />
        <result column="status" jdbcType="CHAR" property="status" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="sex" jdbcType="CHAR" property="sex" />
        <result column="avatar" jdbcType="BLOB" property="avatar"/>
        <result column="role_id" jdbcType="VARCHAR" property="roleId" />
        <result column="role_name" jdbcType="VARCHAR" property="roleName" />
        <result column="department_name" jdbcType="VARCHAR" property="departmentName" />
        <result column="role_key" jdbcType="VARCHAR" property="roleKey" />
        <result column="role_value" jdbcType="VARCHAR" property="roleType" />
        <result column="caller_name" jdbcType="VARCHAR" property="callerName" />
        <!--<collection property="roleData" column="{userId=user_id}" javaType="ArrayList"
                    ofType="com.h3c.bigdata.zhgx.function.system.entity.AuthRoleInfoEntity"
                    select="com.h3c.bigdata.zhgx.function.system.dao.AuthRoleInfoEntityMapper.select" />-->
    </resultMap>

    <select id="queryUserWithRole" resultMap="UserWithRoleResultMap">
        SELECT
        a.id,a.user_id,a.user_name,a.user_name_pinyin,a.department_id,a.phone_number,
        a.email_address,a.age,a.identity_number,a.status,a.create_time,a.update_time,a.sex,a.avatar,a.caller_name,
        GROUP_CONCAT(b.role_id) role_id,
        GROUP_CONCAT(c.role_name) role_name,
        rv.role_key,rv.role_value,
        d.department_name department_name
        from auth_user_info a
        LEFT JOIN auth_user_role b
        on a.user_id=b.user_id
        left JOIN auth_role_info c
        on b.role_id=c.id
        left JOIN auth_role_type rv
        on rv.role_key=c.role_key
        LEFT JOIN auth_department_info d
        on a.department_id=d.id
        where 1=1
        <if test="userId != null and userId != ''">
            AND a.user_id like CONCAT ('%',#{userId},'%')
        </if>
        <if test="userName != null and userName != ''">
            AND a.user_name like CONCAT('%',#{userName},'%')
        </if>
        <if test="departmentName != null and departmentName != ''">
            AND department_name like CONCAT('%',#{departmentName},'%')
        </if>
        GROUP BY a.id
    </select>

    <select id="queryUserWithRoleNoAdmin" resultMap="UserWithRoleResultMap">
        SELECT
        a.id,a.user_id,a.user_name,a.user_name_pinyin,a.department_id,a.phone_number,
        a.email_address,a.age,a.identity_number,a.status,a.create_time,a.update_time,a.sex,a.avatar,a.caller_name,
        GROUP_CONCAT(b.role_id) role_id,
        GROUP_CONCAT(c.role_name) role_name,
        rv.role_key,rv.role_value,
        d.department_name department_name
        from auth_user_info a
        LEFT JOIN auth_user_role b
        on a.user_id=b.user_id
        left JOIN auth_role_info c
        on b.role_id=c.id
        left JOIN auth_role_type rv
        on rv.role_key=c.role_key
        LEFT JOIN auth_department_info d
        on a.department_id=d.id
        WHERE 1=1
        AND (role_id != '20180910100433650' OR role_id IS NULL)
        <if test="userId != null and userId != ''">
            AND a.user_id like CONCAT('%',#{userId},'%')
        </if>
        <if test="userName != null and userName != ''">
            AND a.user_name like CONCAT('%',#{userName},'%')
        </if>
        <if test="departmentName != null and departmentName != ''">
            AND department_name like CONCAT('%',#{departmentName},'%')
        </if>
        AND a.status ='0'
        AND a.department_id in
        <foreach item="item" collection="childDeptId" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY a.id
    </select>

    <select id="queryUserByRoleIds" resultMap="UserWithRoleResultMap">
        SELECT
        a.id,a.user_id,a.user_name,a.user_name_pinyin,a.department_id,a.phone_number,
        a.email_address,a.age,a.identity_number,a.status,a.create_time,a.update_time,a.sex,a.avatar,
        b.role_id,
        c.role_name
        from auth_user_info a
        LEFT JOIN auth_user_role b
        on a.user_id=b.user_id
        left JOIN auth_role_info c
        on b.role_id=c.id
        WHERE 1=1
        and
        role_id in
        <foreach item="item" collection="roleIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND a.status = 0
    </select>

    <select id="queryUserByDepetRole" resultMap="UserWithRoleResultMap">
        SELECT
        a.id,a.user_id,a.user_name,a.user_name_pinyin,a.department_id,a.phone_number,
        a.email_address,a.age,a.identity_number,a.status,a.create_time,a.update_time,a.sex,a.avatar,
        b.role_id,
        c.role_name
        from auth_user_info a
        LEFT JOIN auth_user_role b
        on a.user_id=b.user_id
        left JOIN auth_role_info c
        on b.role_id=c.id
        WHERE 1=1
        and
        role_id in
        <foreach item="item" collection="roleIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="deptId != null and deptId != ''">
            AND a.department_id =#{deptId}
        </if>
        AND a.status = 0
    </select>

    <select id="queryUserWithRoleForPerson" resultMap="UserWithRoleResultMap">
        SELECT
        a.id,a.user_id,a.user_name,a.user_name_pinyin,a.department_id,a.phone_number,
        a.email_address,a.age,a.identity_number,a.status,a.create_time,a.update_time,a.sex,a.avatar,
        GROUP_CONCAT(b.role_id) role_id,dept.department_name,
        GROUP_CONCAT(c.role_name) role_name
        from auth_user_info a
        LEFT JOIN auth_user_role b
        on a.user_id=b.user_id
        left  join auth_department_info dept on a.department_id = dept.id
        left JOIN auth_role_info c
        on b.role_id=c.id
        WHERE 1=1
        <if test="userId != null and userId != ''">
            AND a.user_id =#{userId}
        </if>
        <if test="userName != null and userName != ''">
            AND a.user_name like CONCAT('%',#{userName},'%')
        </if>
        AND a.status = 0
        GROUP BY a.id
    </select>

    <!--根据user_id获取用户角色列表-->
    <select id="getUserRoleByUserId"
            resultType="com.h3c.bigdata.zhgx.function.system.entity.AuthRoleInfoEntity">
        select b.id as id, b.role_key as roleKey,b.role_name as roleName from auth_user_role a,auth_role_info b  where a.user_id = #{user_id}
        and a.role_id = b.id
    </select>

</mapper>